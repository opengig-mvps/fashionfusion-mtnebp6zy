
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
  }
  
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }
        
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?
  username         String    @unique
  name             String?
  role             String    @default("user")
  bio              String?
  profilePicture   String?
  googleId         String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  posts            Post[]
  likes            Like[]
  followers        Follow[]  @relation("UserFollowers")
  following        Follow[]  @relation("UserFollowing")
  payments         Payment[]
}

model Post {
  id               Int       @id @default(autoincrement())
  imageUrl         String
  caption          String?
  hashtags         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId           Int
  user             User      @relation(fields: [userId], references: [id])

  likes            Like[]
}

model Like {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())

  userId           Int
  user             User      @relation(fields: [userId], references: [id])

  postId           Int
  post             Post      @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())

  followerId       Int
  follower         User      @relation("UserFollowers", fields: [followerId], references: [id])

  followingId      Int
  following        User      @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Payment {
  id               Int       @id @default(autoincrement())
  amount           Float
  paymentStatus    String
  paymentDate      DateTime  @default(now())
  paymentMethod    String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId           Int
  user             User      @relation(fields: [userId], references: [id])
}